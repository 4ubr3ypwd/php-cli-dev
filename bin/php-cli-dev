#!/usr/bin/env php
<?php

namespace aubreypwd\PHP_CLI_Dev;

use \splitbrain\phpcli\Options;

require_once __DIR__ . '/../autoload.php';

final class Command extends \aubreypwd\PHP_CLI\Command {

	protected function setup( Options $options ) : void {

		$this->set_desc( $options, 'Development testbed for aubreypwd/php-cli' );

		$this->explain_option( $options, 'version', 'Print version.', 'v' );
		$this->explain_option( $options, 'do', 'Set this to the method test name or all.', '', 'all|name' );

		$this->explain_argument( $options, 'all', 'Test the all methods.', false );

		$this->explain_option( $options, 'rid-dir', 'When testing the rid() method set this to a directory.', '', '/tmp' );
		$this->explain_option( $options, 'rid-cmd', 'When testing the rid() method set this to a command to run in directory.', '', '/tmp' );
	}

	protected function main( Options $options ) : void {

		$this->log( '<p><yellow>Welcome</yellow> <green>to</green> <red>php-cli-dev</red></p>' );

		if ( in_array( true, [
			$this->do_all( $options ),
			$this->method_tests( $options ),
			$this->version( $options ),
		], true ) ) {
			return;
		}

		$this->show_help( $options );
	}

	private function do_all( Options $options ) : bool {

		$opt_value = $this->get_opt( $options, 'do' );

		if ( empty( $opt_value ) ) {
			return false;
		}

		$this->log( "<li><red>--do</red> is set to: <blue>{$opt_value}</blue></li>" );

		return true;
	}

	private function version( Options $options ) : bool {

		if ( ! $this->get_opt( $options, 'version' ) ) {
			return false;
		}

		$this->info( '1.0.0' );

		return true;
	}

	private function method_tests( Options $options ) : bool {

		return in_array( true, [

			$this->test_method( $options, 'has_command', function() {
				$this->log( $this->has_command( 'brew' )
					? '<li><green>brew</green> is installed</li>'
					: '<li><red>brew</red> is <red>not</red> installed</li>' );

				$this->log( $this->has_command( 'asdfqwer01234' )
					? '<li><green>asdfqwer01234</green> is installed</li>'
					: '<li><red>asdfqwer01234</red> is <red>not</red> installed</li>' );
			} ),

			$this->test_method( $options, 'get_php_version', function() {
				$this->log( "<li>The <cyan>PHP</cyan> version installed is: <purple>{$this->get_php_version()}</purple></li>" );
			} ),

			$this->test_method( $options, 'get_working_dirname', function() {
				$this->log( "<li>The <cyan>current directory name</cyan> is: <yellow>{$this->get_working_dirname()}</yellow></li>" );
			} ),

			$this->test_method( $options, 'get_working_dir', function() {
				$this->log( "<li>The <cyan>current directory path</cyan> is: <yellow>{$this->get_working_dir()}</yellow></li>" );
			} ),

			$this->test_method( $options, 'rid', function() use ( $options ) {

				$rid_dir = $this->get_opt( $options, 'rid-dir' );
				$rid_cmd = $this->get_opt( $options, 'rid-cmd' );

				$dir     = empty( $rid_dir ) ? sys_get_temp_dir() : $rid_dir;
				$command = empty( $rid_cmd ) ? 'ls -1 | wc -l' : $rid_cmd;

				$this->log( "<li>We ran <red>{$command}</red> in <blue>{$dir}</blue>:</li>" );

				$rid = $this->rid( $command, $dir );

				$rid_out = $this->exec_get_output(
					$rid,
					'string'
				);

				if ( empty( $rid_out ) ) {

					$this->log( "<br><red>Failed to run <yellow>{$command}</yellow> in <white>{$dir}</white>...</red>" );

					return;
				}

				$this->log( "<br><green>{$rid_out}</green>" );

			} ),
		], true );
	}

	private function test_method( Options $options, string $arg, $cb ) {

		$this->explain_argument( $options, $arg, "Test the {$arg}() method.", false );

		if (
			! $this->arg_present( $options, $arg ) && // By name
			'all' !== $this->get_arg( $options, 0 ) && // all
			'all' !== $this->get_opt( $options, 'do' ) && // --do all
			$arg !== $this->get_opt( $options, 'do' ) // --do <name>
		) {
			return false;
		}

		$this->log( "<br>Testing method <purple>{$arg}()</purple>..." );

		$cb();

		return true;
	}
}

$cli = new \aubreypwd\PHP_CLI_Dev\Command();

try {

	$cli->run();

} catch ( \Exception $e ) {

	$cli->log( 'error', "{$e->getMessage()}\n" );
}
